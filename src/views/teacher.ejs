<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher management system</title>
    <!-- 引入 Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>

<body>
    <div class="global-message" id="globalMessage"></div>
    <div class="custom-confirm" id="customConfirm">
        <div class="message" id="confirmMessage"></div>
        <div class="buttons">
            <button class="confirm" id="confirmYes">Yes</button>
            <button class="cancel" id="confirmNo">No</button>
        </div>
    </div>
    <div class="container">
        <input type="hidden" id="teacherId" value="<%=teacher_id %>">
        <input type="hidden" id="teacherName" value="<%=teacher_name %>">
        <!-- Top Area -->
        <div class="header">
            <div class="welcome-message">Welcome, Teacher <%=teacher_name %>！</div>
            <div class="notification-icon" onclick="toggleNotificationPopup()" style="display: none;">
                <i class="fas fa-bell"></i>
                <span class="badge" id="notification-count">10</span>
            </div>
            <div class="notification-popup" id="notification-popup">
                <ul id="notification-list"></ul>
            </div>
        </div>
        <!-- 日期选择和统计按钮 -->
        <div class="date-buttons" id="static_date" style="display: none;">
            <input type="date" id="startDate" class="date-input">~
            <input style="margin-left: 10px;" type="date" id="endDate" class="date-input">
            <button onclick="calculateStatistics()">statistics</button>
        </div>
        <!-- 日期选择和前一天、后一天按钮 -->
        <div class="date-buttons" id="course_date">
            <button onclick="changeDate(-1)"><i class="fas fa-chevron-left"></i></button>
            <input style="margin-left: 10px;" type="date" id="selectedDate" value="2024-12-02" onchange="fetchData()">
            <button onclick="changeDate(1)"><i class="fas fa-chevron-right"></i></button>
        </div>

        <!-- 当前时区显示 -->
        <div class="timezone-container">
            <label for="timezoneSelect">timezone：</label>
            <select id="timezoneSelect" onchange="updateTimezone()">
                <option value="America/Los_Angeles">PT (GMT-7)</option>
                <option value="America/Denver">MT (GMT-6)</option>
                <option value="America/Chicago">CT (GMT-5)</option>
                <option value="America/New_York">ET (GMT-4)</option>
                <option value="Asia/Shanghai">Shanghai (GMT+8)</option>
                <!-- 其他时区选项 -->
            </select>
        </div>
        <!-- Course Management -->
        <div id="courseDiv" class="courseDiv" style="display: block;">
            <div style="display: flex; align-items: center; margin: 20px 0;">
                <hr style="flex-grow: 1; border: none; border-top: 1px solid #f7f9fc;">
                <span style="padding: 0 10px; color: #FFFFFF;" id="courseTitle">My courses</span>
                <hr style="flex-grow: 1; border: none; border-top: 1px solid #f7f9fc;">
            </div>
            <!-- 课程列表 -->
            <div class="course-list" id="courseList">
            </div>
            <!-- 全选按钮栏-->
            <div class="selectAll">
                <label><input type="checkbox" class="courseCheckBox2" id="selectAll" onclick="selectAll()">Select All</label>
            </div>

            <div class="button-group" id="course_Leave" style="display: none;">
                <button class="cancle-button" onclick="hideLeaveCheck()">Cancel</button>
                <button class="leave-button" onclick="openLeaveModal()">Next</button>
            </div>

            <!-- 底部按钮 -->
            <div class="button-group" id="course_bottom">
                <button class="stats-button" onclick="showStatistics()">Lesson time statistics</button>
                <button class="leave-button" onclick="showLeaveCheck()">Leave of absence</button>
            </div>
        </div>
        <!-- Course Consumption Statistics -->
        <div id="Statistics" style="display: none;" class="courseDiv">
            <div style="display: flex; align-items: center; margin: 20px 0;">
                <hr style="flex-grow: 1; border: none; border-top: 1px solid #f7f9fc;">
                <span style="padding: 0 10px; color: #FFFFFF;">My Statistics</span>
                <hr style="flex-grow: 1; border: none; border-top: 1px solid #f7f9fc;">
            </div>
            <!-- 课消统计 -->
            <div id="total" class="course-list">
                <p id="totalDuration">Total Duration: 0.00 hours</p>
                <div class="table-container">
                    <table border="1">
                        <thead>
                            <tr>
                                <th class="head-th">Course Name</th>
                                <th class="head-th">Course Start Time</th>
                                <th class="head-th">Course End Time</th>
                                <th class="head-th">Course Duration (hours)</th>
                            </tr>
                        </thead>
                        <tbody id="TotalList">
                            <!-- 课程明细将动态插入到这里 -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- 底部按钮 -->
            <div class="button-group">
                <button class="cancle-button" onclick="hideStatistics()">Cancel</button>
                <button class="leave-button" onclick="printDiv('total')">Print</button>
            </div>
        </div>
        <!-- Course Details -->
        <div id="courseDetails" style="display: none;">
            <div style="display: flex; align-items: center; margin: 20px 0;">
                <hr style="flex-grow: 1; border: none; border-top: 1px solid #f7f9fc;">
                <span style="padding: 0 10px; color: #FFFFFF;">Course Details</span>
                <hr style="flex-grow: 1; border: none; border-top: 1px solid #f7f9fc;">
            </div>
            <div class="table-container2" id="detailDiv">
                <div class="input-group_detail">
                    <label>Course Name:</label>
                    <span id="courseName"></span>
                </div>
                <div class="input-group_detail">
                    <label>Class Time:</label>
                    <span id="courseTime"></span>
                </div>
                <div class="input-group_detail">
                    <label>English Level:</label>
                    <span id="courseLevel"></span>
                </div>
                <div class="input-group_detail">
                    <label>Class Type:</label>
                    <span id="courseType"></span>
                </div>
                <div class="input-group_detail">
                    <label>Student's Name:</label>
                    <span id="who"></span>
                </div>
                <div class="input-group_detail">
                    <label>Signed up:</label>
                    <span id="signedup"></span>
                </div>

                <div class="div_container">
                    <!-- Tabs -->
                    <div class="tabs">
                        <div class="tab active" id="preClassTab">Pre-class homework</div>
                        <div class="tab" id="afterClassTab">Homework after class</div>
                    </div>

                    <!-- Tab content -->
                    <div class="tab-content">
                        <textarea placeholder="Please fill it out" id="coursetext_preview"
                            style="display: none;"></textarea>
                        <textarea placeholder="Please fill it out" id="coursetext_homework"
                            style="display: none;"></textarea>
                    </div>

                    <!-- Upload section -->
                    <div class="upload-section">
                        <img src="/images/upload.png" alt="upload icon" onclick="checkfile()">
                        <div class="text">Click Upload file</div>
                        <div class="description">A maximum of 5 attachments can be uploaded, and the size of each
                            attachment cannot exceed 10M
                        </div>
                        <input hidden type="file" id="fileUpload" onchange="uploadFile()" multiple>
                        <div class="uploaded-files" id="uploadedFiles_preview" style="display: none;"></div>
                        <div class="uploaded-files" id="uploadedFiles_homework" style="display: none;"></div>
                    </div>
                </div>
                <div id="studentAttendance" class="studentList">
                    <!-- 学生考勤将动态插入到这里 -->
                </div>
                <div id="studentList" class="studentList">
                    <!-- 学生评价将动态插入到这里 -->
                </div>
            </div>
            <!-- 底部按钮 -->
            <div class="button-group">
                <button class="cancle-button" onclick="hideDetail()">Cancel</button>
                <button class="leave-button" onclick="Save()">Save</button>
            </div>
        </div>
    </div>
    <!-- Full-day Leave Modal -->
    <div id="leaveModal" class="modal" style="display: none;">
        <div class="modal-content">
            <span class="close-btn" onclick="closeLeaveModal()">&times;</span>
            <h2>Leave Reason</h2>
            <p>You are applying for leave, please confirm your leave time and reason:</p>
            <div class="row-group">
                <label>Leave Time：</label>
                <span id="leave_time"></span>
            </div>
            <div class="row-group">
                <label>Leave Reason：</label>
                <select id="leaveReason">
                    <option value="personal">Personal Leave</option>
                    <option value="sick">Sick Leave</option>
                    <option value="other">Other</option>
                </select>
            </div>
            <div class="row-group" style="height:50px;">
                <label>Leave Comment：</label>
                <textarea id="leaveComment" rows="3" placeholder="Enter your comment here..."></textarea>
            </div>
            <input type="hidden" id="leaveCourse" value="">
          
            <div class="modal-footer">
                <button class="cancle-button1" onclick="closeLeaveModal()">Cancel</button>
                <button class="leave-button1" onclick="submitLeaveRequest()">Submit</button>
            </div>
        </div>
    </div>
</body>

</html>
<style>
     .global-message {
        position: fixed;
        top: 0;
        left: 50%;
        transform: translateX(-50%);
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        display: none; /* 默认隐藏 */
    }
    .global-message.success {
        background-color: #4CAF50; /* 绿色背景 */
        color: white;
    }
    .global-message.error {
        background-color: #f44336; /* 红色背景 */
        color: white;
    }
    .global-message.info {
        background-color: #2196F3; /* 蓝色背景 */
        color: white;
    }
    .global-message.warning {
        background-color: #ff9800; /* 橙色背景 */
        color: white;
    }
    body {
        margin: 0;
        font-family: 'Arial', sans-serif;
        background: #FFFFFF;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        overflow-y: hidden;
        min-width: 380px;
    }

    .div_container {
        width: 98%;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        margin-top: 10px;
        padding-bottom: 10px;
    }

    .selectAll {
        display: none;
        width: 100%;
        margin-bottom: 10px;
        height: 40px;
        background-color: #f2f9f8;
        padding: 10px;
        justify-content: center;
    }
    .selectAll label {
        justify-content: center;
    }

    .leaveShow {
        display: block;
    }

    .leaveHide {
        display: none;
    }

    .accept {
        background-color: #E0F3FF;
        color:#647BF3;
        border-radius: 5px;
    }

    .refuse {
        background-color: #FFEEE0;
        color:#FCBEA4";
        border-radius: 5px;
    }

    .courseCheckBox,
    .courseCheckBox2 {
        height: 15px;
        width: 15px;
    }

    .tabs {
        display: flex;
        border-bottom: 2px solid #e0e0e0;
    }

    .tab {
        flex: 1;
        text-align: center;
        padding: 10px;
        cursor: pointer;
        font-weight: bold;
        color: #666;
        transition: background-color 0.3s, color 0.3s;
    }

    .tab.active {
        background-color: #4a90e2;
        color: white;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
    }

    .tab-content {
        margin-top: 10px;
        padding: 10px;
    }

    .tab-content textarea {
        width: 96%;
        height: 90px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 12px;
        resize: none;
    }

    .upload-section {
        margin: 10px;
        padding: 10px;
        border: 2px dashed #4a90e2;
        border-radius: 8px;
        text-align: center;
        background-color: #f0f7ff;
        color: #4a90e2;
    }

    .upload-section img {
        width: 50px;
        height: 50px;
    }

    .upload-section .text {
        font-size: 16px;
        font-weight: bold;
        margin: 10px 0;
    }

    .upload-section .description {
        font-size: 12px;
        color: #777;
    }

    .courseDiv {
        height: 100vh;
        /* 可选：添加内边距 */
        box-sizing: border-box;
        /* 确保内边距和边框包含在元素的总宽度和高度内 */
        display: flex;
        flex-direction: column;
    }

    /* 自适应内部元素 */
    .courseDiv>* {
        width: 100%;
        /* 让内部元素宽度自适应父容器 */
        box-sizing: border-box;
        /* 确保内边距和边框包含在元素的总宽度和高度内 */
    }

    /* 可选：美化滚动条 */
    #courseDiv::-webkit-scrollbar {
        width: 12px;
    }

    #courseDiv::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    #courseDiv::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 6px;
    }

    #courseDiv::-webkit-scrollbar-thumb:hover {
        background: #555;
    }

    .container {
        background: linear-gradient(to bottom, #2F51FF, #F7F9FC);
        width: 360px;
        padding: 20px;
        border-radius: 20px;
        box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        height: 90vh;
        overflow-y: auto;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .welcome-message {
        font-size: 16px;
        color: #ffffff;
    }

    .notification-icon {
        font-size: 24px;
        color: #e8ecf1;
        cursor: pointer;
        position: relative;
        display: inline-block;
    }

    .notification-icon .badge {
        position: absolute;
        right: -8px;
        background-color: red;
        color: white;
        border-radius: 50%;
        padding: 6px 9px 6px 4px;
        font-size: 5px;
        width: 5px;
    }

    .notification-popup {
        display: none;
        position: absolute;
        top: 50px;
        right: 0;
        width: 200px;
        max-height: 400px;
        overflow-y: auto;
        background-color: white;
        border: 1px solid #ccc;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
    }

    .notification-popup ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .notification-popup li {
        padding: 10px;
        border-bottom: 1px solid #eee;
        font-size: 10px;
    }

    .notification-popup li:last-child {
        border-bottom: none;
    }

    .notification-popup li a {
        color: #333;
        text-decoration: none;
    }

    .input-group {
        margin-bottom: 20px;
    }

    .input-group label {
        display: block;
        font-size: 14px;
        margin-bottom: 8px;
        color: #ffffff;
    }

    .input-group input {
        width: 94%;
        padding: 10px;
        font-size: 16px;
        border-radius: 8px;
        border: 1px solid #ddd;
    }

    .input-group select {
        width: 94%;
        padding: 10px;
        font-size: 16px;
        border-radius: 8px;
        border: 1px solid #ddd;
    }

    .row-group {
        width: 90%;
        height: 20px;
        margin-top: 10px;
        margin-left: auto;
        margin-right: auto;
        margin-bottom: 20px;
        background-color: #ffffff;
        display: flex;
        align-items: center;
        padding: 10px;
        border-radius: 10px;
    }

    .row-group label {
        width: 200px;
        display: block;
        font-size: 14px;
        color: #0c0c0c;
        margin-bottom: 8px;
        margin-right: 10px;
        text-align: right;
    }

    .row-group span {
        width: 100%;
        font-size: 14px;
    }

    .input-group_detail {
        width: 98%;
        height: 20px;
        margin-top: 10px;
        margin-left: auto;
        margin-right: auto;
        background-color: #ffffff;
        display: flex;
        align-items: center;
        padding: 10px 0 10px 10px;
        border-radius: 8px;
    }

    .input-group_detail label {
        display: block;
        font-size: 12px;
        color: #6b6969;
        margin-right: 10px;
    }

    .input-group_detail span {
        display: block;
        font-size: 12px;
        color: #2D2D2D;
        margin-right: 10px;
        font-weight: bold;
    }

    .input-group_detail2 {
        width: 90%;
        height: 80px;
        margin-top: 10px;
        margin-left: auto;
        margin-right: auto;
        background-color: #ffffff;
        display: flex;
        align-items: center;
        padding: 10px;
        border-radius: 10px;
    }

    .input-group_detail2 textarea {
        width: 70%;
        height: 80px;
        display: block;
        font-size: 12px;
        color: #080808;
        margin-right: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        resize: none;
    }

    .date-buttons {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .date-buttons button {
        background-color: #2e4deb;
        color: white;
        border: none;
        padding: 10px;
        font-size: 16px;
        border-radius: 8px;
        cursor: pointer;
        width: 30%;
        /* 调整按钮宽度 */
        height: 50px;
        /* 调整按钮高度 */
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .date-buttons3 button {
        background-color: #007bff;
        color: white;
        text-align: center;
        padding: 12px;
        font-size: 16px;
        font-weight: bold;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        width: 30%;
        /* 确保两个按钮在一行内 */
    }

    .date-buttons input[type="date"] {
        flex-grow: 1;
        margin: 0 10px 0 0;
        padding: 10px;
        font-size: 16px;
        border-radius: 8px;
        border: 1px solid #ddd;
    }

    .course-list {
        flex: 1;
        border-bottom: 1px solid #ddd;
    }

    .course-item {
        background-color: #f3f6ff;
        border-radius: 10px;
        padding: 15px;
        margin: 0 0 15px auto;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.05);
        display: flex;
        align-items: center;
        cursor: pointer;
        position: relative;
        /* 添加鼠标指针样式 */
    }

    .course-item-absent {
        background-color: #edb781;
    }

    .course-icon {
        width: 40px;
        height: 40px;
        background-color: #ffcc99;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-right: 10px;
        font-size: 18px;
    }

    .add-course {
        cursor: pointer;
        font-size: 14px;
        color: #999;
    }

    .course-info {
        flex: 1;
    }

    .course-info h4 {
        margin: 0;
        font-size: 16px;
        color: #333;
    }

    .course-info p {
        margin: 5px 0;
        font-size: 14px;
        color: #999;
    }

    .courseinfo-ico {
        background-color: #ffcc99;
    }

    .course-arrow {
        font-size: 18px;
        color: #007bff;
    }

    .button-group {
        flex: 1;
        border-top: 1px solid #ddd;
        display: flex;
        justify-content: space-between;
        padding-bottom: 20px;
    }

    .cancle-button {
        color: #2F51FF;
        background-color: white;
        text-align: center;
        padding: 12px;
        font-size: 16px;
        font-weight: bold;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        width: 48%;
        height: 55px;
    }
    .cancle-button:hover {
        background-color: #f0f0f0;
    }

    .cancle-button1 {
        color: #2F51FF;
        background-color: white;
        text-align: center;
        padding: 12px;
        font-size: 14px;
        font-weight: bold;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        width: 48%;
        height: 55px;
    }
    .cancle-button1:hover {
        background-color: #f0f0f0;
    }

    .stats-button,
    .leave-button {
        background-color: #2F51FF;
        color: white;
        text-align: center;
        padding: 12px;
        font-size: 16px;
        font-weight: bold;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        width: 48%;
        height: 55px;
        /* 确保两个按钮在一行内 */
    }

    .date-buttons button:hover,
    .stats-button:hover,
    .leave-button1:hover,
    .leave-button:hover {
        background-color: #0056b3;
    }

    .leave-button1 {
        background-color: #2F51FF;
        color: white;
        text-align: center;
        padding: 12px;
        font-size: 14px;
        font-weight: bold;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        width: 48%;
        height: 55px;
        /* 确保两个按钮在一行内 */
    }

    /* Modal Background */
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.4);
    }

    /* Modal Content */
    .modal-content {
        background-color: #dae1eb;
        margin: 15% auto;
        padding: 20px;
        border-radius: 5px;
        width: 400px;
        height: 350px;
        position: relative;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .modal-content textarea {
        margin-top: 5px;
        width: 99%;
    }

    /* Close Button */
    .close-btn {
        color: #aaa;
        position: absolute;
        right: 10px;
        top: 10px;
        font-size: 18px;
        cursor: pointer;
    }

    .close-btn:hover {
        color: #000;
    }

    /* Modal Title */
    h2 {
        font-size: 18px;
        margin: 0 0 10px 0;
    }

    /* Select Dropdown */
    select {
        width: 100%;
        padding: 5px;
        margin-top: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    /* Modal Footer */
    .modal-footer {
        flex: 1;
        border-top: 1px solid #ddd;
        display: flex;
        justify-content: space-between;
        padding-top: 7px;
    }

    #cancelBtn {
        background-color: #f0f0f0;
        color: #333;
    }

    #submitBtn {
        background-color: #007bff;
        color: white;
    }

    #submitBtn:hover {
        background-color: #0056b3;
    }

    .upload-container {
        text-align: left;
        background-color: #ffffff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        gap: 15px;
        width: 100%;
        max-width: 600px;
    }

    .upload-icon {
        font-size: 36px;
        color: #007bff;
        text-align: left;
    }

    .upload-btn-wrapper {
        position: relative;
        overflow: hidden;
        display: inline-block;
    }

    .btn {
        border: 2px solid #007bff;
        color: #007bff;
        background-color: #ffffff;
        padding: 10px 20px;
        font-size: 12px;
        font-weight: 600;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn:hover {
        background-color: #007bff;
        color: #ffffff;
    }

    .upload-btn-wrapper input[type="file"] {
        font-size: 100px;
        position: absolute;
        left: 0;
        top: 0;
        opacity: 0;
        cursor: pointer;
    }

    .file-name {
        font-size: 14px;
        color: #666;
        flex: 1;
        /* 文件名部分填满剩余空间 */
        white-space: nowrap;
        /* 防止文件名换行 */
        overflow: hidden;
        text-overflow: ellipsis;
        /* 超长文件名显示省略号 */
    }

    .status {
        font-size: 14px;
        color: #28a745;
        margin-top: 10px;
    }


    .table-container {
        margin-bottom: 20px;
        min-height: 300px;
        overflow-x: hidden;
        border: 1px solid #ddd;
    }

    .table-container2 {
        margin-bottom: 20px;
        min-height: 200px;
        overflow-x: hidden;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    table,
    th,
    td {
        border: 1px solid #ddd;
    }

    th,
    td {
        padding: 10px;
        text-align: left;
    }

    th {
        background-color: #f2f2f2;
        position: sticky;
        top: 0;
        z-index: 1;
    }

    .head-th {
        background-color: #97a3df;
    }

    tbody tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    /* Custom scrollbar styles */
    .table-container::-webkit-scrollbar {
        width: 12px;
    }

    .table-container::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .table-container::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 6px;
    }

    .table-container::-webkit-scrollbar-thumb:hover {
        background: #555;
    }

    /* Date input styles */
    .date-input {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 16px;
        margin-right: 10px;
    }

    .rating-container {
        width: 98%;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 0px;
        margin: 8px 8px 0 5px;
    }

    .dropdown {
        background: #2F51FF0F;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 14px;
        cursor: pointer;
        border-radius: 4px;
        padding: 0 10px 0 20px;
        height: 35px;
        position: relative;
    }

    .dropdown span {
        color: #070707;
        font-size: 14px;
        font-weight: bold;
    }

    .dropdown i {
        color: #31373D;
    }

    .arrow {
        transition: transform 0.5s;
    }

    .rotated {
        transform: rotate(90deg);
    }

    .hidden {
        display: none;
    }

    .rating-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 10px 0 0 10px;
    }

    .rating-item span,
    .comment-box label {
        color: #00000073;
        font-size: 12px;
        font-weight: bold;
    }

    .stars {
        display: flex;
        cursor: pointer;
    }

    .star {
        font-size: 20px !important;
        color: lightgray;
        margin-left: auto;
        border-radius: 1px;
    }

    .star.selected {
        color: gold;
    }

    .score {
        width: 35px;
    }

    .comment-box {
        font-size: 12px;
        margin-left: 10px;
        margin-top: 10px;
    }

    .comment-box textarea {
        width: 94%;
        height: 40px;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
        font-size: 12px;
        resize: none;
        margin-top: 10px;
    }

    .char-counter {
        text-align: right;
        font-size: 12px;
        margin-right: 10px;
        color: gray;
    }

    .details {
        margin: 10px;
    }

    .upload-icon {
        cursor: pointer;
        font-size: 20px;
        color: #080808;
    }

    .upload-icon input[type="file"] {
        display: none;
    }

    .uploaded-files {
        margin-top: 10px;
        /* height: 100%;
overflow-y: auto; */
    }

    .uploaded-file {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
    }

    .uploaded-file span {
        margin-right: 10px;
    }

    .uploaded-file i {
        font-size: 10px;
    }

    .delete-icon {
        cursor: pointer;
        color: red;
    }

    .radio-group {
        display: inline-block;
    }

    .radio-group label {
        display: inline-block;
        margin-right: 10px;
        margin-top: 0px !important;
        color: #31373D;
    }

    .attendance-group {
        display: inline-block;
        display: flex;
        margin: -10px 10px 0 -5px
    }

    .attendance-group label {
        display: inline-block;
        font-size: 12px;
    }

    .leave-icon {
        color: red;
        font-size: 14px;
        display: none;
        /* 默认隐藏 */
    }

    .leave-icon.show {
        display: inline-block;
        /* 显示图标 */
    }

    .leave-icon.hide {
        display: none;
        /* 显示图标 */
    }

    .timezone-container {
        display: flex;
        align-items: center;
    }

    .timezone-container label {
        color: #FFFFFF;
        margin-right: 10px;
        margin-top: 0 !important;
    }

    .timezone-container select {
        width: 150px;
    }

    .new-badge {
        background: linear-gradient(to bottom, #FF6161, #FFc197);
        color: white;
        padding: 5px 10px;
        font-size: 12px;
        border-radius: 20px;
        position: absolute;
        top: -10px;
        right: 0px;
    }

    .new-badge-stu {
        background: linear-gradient(to bottom, #FF6161, #FFc197);
        color: white;
        padding: 5px;
        font-size: 8px;
        border-radius: 50%;
        position: absolute;
        top: -12px;
        left: -2px;
        width: 17px;
        height: 17px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .rlable label {
        border-radius: 3px;
        float: right;
        margin-right: 10px;
        padding: 1px 2px 1px 2px;
    }

    .studentList {
        background-color: #FFFFFF;
        border-radius: 8px;
        margin-top: 10px;
        padding: 10px;
    }



    .student {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 10px 0;
        border-bottom: 1px solid #ccc;
    }

    .student:last-child {
        border-bottom: none;
    }

    .student-info {
        display: flex;
        align-items: center;
    }

    .student-name {
        margin-left: 10px;
    }

    .student_att {
        background: #2F51FF0F;
        padding: 10px;
        border-radius: 8px;
        margin-top: 10px;
    }

    .status {
        font-size: 14px;
        color: #777;
    }

    .taster {
        background-color: #4a90e2;
        color: #fff;
        padding: 2px 5px;
        font-size: 12px;
        border-radius: 4px;
        margin-left: 5px;
    }

    .attendance-status {
        display: flex;
        align-items: center;
    }

    .attendance-status select {
        padding: 5px;
        border: 1px solid #7AA7FE;
        border-radius: 4px;
        color: #484545;
    }

    .attendance-status .dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 5px;
    }

    .blue {
        background-color: #4a90e2;
    }

    .green {
        background-color: #7ed321;
    }

    .red {
        background-color: #d0021b;
    }

    .orange {
        background-color: #f5a623;
    }

    select {
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }


    /* 媒体查询，用于调整PC端显示样式 */
    @media (min-width: 768px) {
        .container {
            width: 600px;
        }

        .input-group input,
        .input-group select {
            width: 100%;
        }

        .notification-popup {
            top: 90px;
        }
    }

    /* 媒体查询，用于调整移动端显示样式 */
    @media (max-width: 767px) {
        .container {
            height: 90vh;
            /* 调整高度以尽量铺满屏幕 */
        }

        .course-list {
            /* max-height: 360px; */
            /* 移除最大高度限制 */
            flex-grow: 1;
            /* 使课程列表区域拉伸 */
        }

        .notification-popup {
            top: 75px;
        }

        .date-buttons input[type="date"] {
            font-size: 12px;
        }

        .date-buttons button {
            height: 40px;
        }
    }

    .custom-confirm {
        line-height: 1.6;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #dae1eb;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        z-index: 1001;
        display: none; /* 默认隐藏 */
    }
    .custom-confirm .message {
        margin-bottom: 20px;
    }
    .custom-confirm .buttons {
        text-align: right;
    }
    .custom-confirm .buttons button {
        margin-left: 10px;
        padding: 5px 10px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
    }
    .custom-confirm .buttons .confirm {
        background-color: #4CAF50; /* 绿色背景 */
        color: white;
    }
    .custom-confirm .buttons .cancel {
        background-color: #f44336; /* 红色背景 */
        color: white;
    }
</style>
<script>
    const url = "/classroom";
    let nowpage = "course";
    let filetype_check = "preview";
    let isLeaveCheck = false;
    let courseChecks =[];
    document.getElementById('uploadedFiles_preview').style.display = 'block';
    document.getElementById('coursetext_preview').style.display = 'block';
    const subid = document.getElementById('teacherId').value;
    const teacher_name = document.getElementById('teacherName').value;
    let current_eventId = "";
    let today_course = [];
    let current_course = null;
    let timezoneSet = 'UTC';
    let current_date;
    const tzSet = {
        "GMT-1": "Atlantic/Azores",
        "GMT-2": "America/Noronha",
        "GMT-3": "America/Sao_Paulo",
        "GMT-4": "America/New_York",
        "GMT-5": "America/Chicago",
        "GMT-6": "America/Denver",
        "GMT-7": "America/Los_Angeles",
        "GMT-8": "America/Anchorage",
        "GMT-9": "Pacific/Honolulu",
        "GMT+0": "UTC",
        "GMT+1": "Europe/London",
        "GMT+2": "Europe/Paris",
        "GMT+3": "Europe/Moscow",
        "GMT+4": "Asia/Dubai",
        "GMT+5": "Asia/Karachi",
        "GMT+6": "Asia/Dhaka",
        "GMT+7": "Asia/Bangkok",
        "GMT+8": "Asia/Shanghai",
        "GMT+9": "Asia/Tokyo",
        "GMT+10": "Australia/Sydney",
        "GMT+11": "Pacific/Noumea",
        "GMT+12": "Pacific/Auckland"
    };

    document.addEventListener('DOMContentLoaded', () => {
        const timeZone = new Date().toLocaleTimeString('en-us', { timeZoneName: 'short' }).split(' ')[2];
        timezoneSet = tzSet[timeZone];
        document.getElementById('timezoneSelect').value = timezoneSet;
        // document.getElementById('timezone').innerText = 'timezone： ' + timeZone;

        current_date = formatDate();

        const selectedDate = document.getElementById('selectedDate');
        selectedDate.value = current_date;
        fetchData();
        //fetchNewMessages();

        // Poll for new messages every 30 seconds
        //setInterval(fetchNewMessages, 30000);
    });

    function showMessage(message, type = 'info') {
        const messageElement = document.getElementById('globalMessage');
        messageElement.textContent = message;

        // 移除所有类型的类
        messageElement.classList.remove('success', 'error', 'info', 'warning');

        // 根据类型添加相应的类
        messageElement.classList.add(type);

        messageElement.style.display = 'block';

         // 添加点击事件监听器，点击时隐藏消息
        messageElement.onclick = () => {
            messageElement.style.display = 'none';
        };

        setTimeout(() => {
            messageElement.style.display = 'none';
        }, 5000); // 5秒后自动消失
    }

    function showConfirm(message, callback) {
        const confirmElement = document.getElementById('customConfirm');
        const confirmMessage = document.getElementById('confirmMessage');
        const confirmYes = document.getElementById('confirmYes');
        const confirmNo = document.getElementById('confirmNo');

        confirmMessage.textContent = message;
        confirmElement.style.display = 'block';

        confirmYes.onclick = () => {
            confirmElement.style.display = 'none';
            callback(true);
        };

        confirmNo.onclick = () => {
            confirmElement.style.display = 'none';
            callback(false);
        };
    }
    // Tab switching logic
    const preClassTab = document.getElementById("preClassTab");
    const afterClassTab = document.getElementById("afterClassTab");
    const coursetext_preview = document.getElementById("coursetext_preview");
    const coursetext_homework = document.getElementById("coursetext_homework");
    const fileUpload_preview = document.getElementById("uploadedFiles_preview");
    const fileUpload_homework = document.getElementById("uploadedFiles_homework");

    preClassTab.addEventListener("click", () => {
        filetype_check = "preview";
        preClassTab.classList.add("active");
        afterClassTab.classList.remove("active");

        coursetext_preview.style.display = 'block';
        fileUpload_preview.style.display = 'block';
        coursetext_homework.style.display = 'none';
        fileUpload_homework.style.display = 'none';
    });

    afterClassTab.addEventListener("click", () => {
        filetype_check = "homework";
        afterClassTab.classList.add("active");
        preClassTab.classList.remove("active");

        coursetext_preview.style.display = 'none';
        fileUpload_preview.style.display = 'none';
        coursetext_homework.style.display = 'block';
        fileUpload_homework.style.display = 'block';
    });

    function showLeaveCheck() {
        isLeaveCheck = true;
        
        document.querySelector('.selectAll').style.display = 'block';
        document.getElementById('course_bottom').style.display = 'none';
        document.getElementById('courseTitle').innerText = 'Course Selection';
        document.getElementById('course_Leave').style.removeProperty('display');

        fetchData();
    }

    function hideLeaveCheck() {
        courseChecks = [];
        isLeaveCheck = false;
        document.querySelector('.selectAll').style.display = 'none';
        document.getElementById('course_bottom').style.removeProperty('display');
        document.getElementById('courseTitle').innerText = 'Course List';
        document.getElementById('course_Leave').style.display = 'none';

        const checkboxes1 = document.querySelectorAll('.course-arrow');
        checkboxes1.forEach(checkbox => {
            checkbox.classList.remove('leaveHide');
        });

        const checkboxes2 = document.querySelectorAll('.rlable');
        checkboxes2.forEach(checkbox => {
            checkbox.classList.remove('leaveHide');
        });

        const checkboxes = document.querySelectorAll('.courseCheckBox');
        checkboxes.forEach(checkbox => {
            checkbox.classList.add('leaveHide');
        });
    }

    function selectAll() {
        const selectAllVal = document.getElementById('selectAll').checked;
        const checkboxes = document.querySelectorAll('.courseCheckBox');
        checkboxes.forEach(checkbox => {
            if(checkbox.disabled){
                return;
            }
            checkbox.checked = selectAllVal;
        });
    }

    function updateTimezone() {
        const timeZone = document.getElementById('timezoneSelect').value;
        timezoneSet = timeZone;
        // document.getElementById('timezone').innerText = 'timezone： ' + timeZone;

        if (nowpage == "course") {
            fetchData();
        } else if (nowpage == "statistics") {
            calculateStatistics();
        } else if (nowpage == "details") {
            showDetails(current_eventId);
        }
    }
    // Function to open the leave modal
    function openLeaveModal() {
        courseChecks=[];
        // 获取所有勾选的课程
        const checkboxes = document.querySelectorAll('.courseCheckBox');
        checkboxes.forEach(checkbox => {
            if (checkbox.checked) {
                courseChecks.push(checkbox.value);
            }
        });
        if(courseChecks.length == 0){
            showMessage('Please select at least one course', 'warning');
            return;
        }

        document.getElementById('leave_time').innerText = current_date
        document.getElementById('leaveModal').style.display = 'flex';
    }

    // Function to close the leave modal
    function closeLeaveModal() {
        document.getElementById('leaveCourse').value = '';
        document.getElementById('leaveModal').style.display = 'none';
    }

    // Function to submit the leave request
    function submitLeaveRequest() {
        const reason = document.getElementById('leaveReason').value;
        const comment = document.getElementById('leaveComment').value;
        try {
            let body = {
                code: subid,
                name: teacher_name,
                reason,
                comment,
                date: current_date,
                courseChecks
            };
            
            fetch(url + '/leave/send', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(body)
            }).then(response => response.json())
                .then(data => {
                    if (data.code == 0) {
                        fetchData();
                        showMessage('Leave request submitted successfully!','success');
                    } else {
                        showMessage('Leave request submitted failed!', 'error');
                    }
                })
                .catch(error => {
                    showMessage('Leave request submitted error!', 'error');
                });
        } catch (error) {
            showMessage('server error', 'error');
        }
        closeLeaveModal();
    }

    // Function for class hour statistics (dummy function, implement your own logic)
    function showStatistics() {
        nowpage = "statistics";
        document.getElementById('courseDiv').style.display = 'none';
        document.getElementById('Statistics').style.display = 'block';

        document.getElementById('static_date').style.removeProperty('display');
        document.getElementById('course_date').style.display = 'none';
    }
    function hideStatistics() {
        nowpage = "course";
        document.getElementById('courseDiv').style.display = 'block';
        document.getElementById('Statistics').style.display = 'none';

        document.getElementById('static_date').style.display = 'none';
        document.getElementById('course_date').style.removeProperty('display');
    }
    function hideDetail() {
        nowpage = "course";
        current_course = null;
        current_eventId = "";
        document.getElementById('courseDiv').style.display = 'block';
        document.getElementById('courseDetails').style.display = 'none';

        document.getElementById('static_date').style.display = 'none';
        document.getElementById('course_date').style.removeProperty('display');
    }

    // 课时统计
    async function calculateStatistics() {
        let sDate = new Date(document.getElementById('startDate').value);
        let eDate = new Date(document.getElementById('endDate').value);

        if (isNaN(sDate) || isNaN(eDate) || sDate > eDate) {
            showMessage('Please enter valid start and end dates', 'warning');
            return;
        }
        sDate = document.getElementById('startDate').value;
        eDate = document.getElementById('endDate').value

        // get the total duration of all courses
        try {
            document.getElementById('totalDuration').textContent = `Total Duration: 0.0 hours`;
            const TotalList = document.getElementById('TotalList');
            TotalList.innerHTML = '';

            const response = await fetch(url + '/total/getdatabysubid', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ subid, sDate, eDate })
            });

            const data = await response.json();
            if (data.code !== 0) {
                showMessage('server error', 'error');
                return;
            }

            const teacherDurations = data.data.find(item => item.type === 'teacher');
            if (teacherDurations) {
                let totalDuration = teacherDurations.duration;
                // const options = { timeZone: 'Asia/Shanghai', year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' };
                // const formatter = new Intl.DateTimeFormat('en-US', options);

                teacherDurations.items.forEach(course => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                <td>${course.title}</td>
                <td>${formatDateTime(course.sdate)}</td>
                <td>${formatDateTime(course.edate)}</td>
                <td>${course.hours}</td>
            `;
                    TotalList.appendChild(row);
                });

                document.getElementById('totalDuration').textContent = `Total Duration: ${totalDuration.toFixed(2)} hours`;
            }
        } catch (error) {
            console.error('Error fetching data:', error);
            showMessage('Error fetching data', 'error');
        }
    }

    function printDiv(divId) {
        const divToPrint = document.getElementById(divId);
        const newWin = window.open('', 'Print-Window');
        newWin.document.open();
        newWin.document.write('<html><head><title>Print</title><style>body{font-family: Arial, sans-serif;} table{width: 100%; border-collapse: collapse;} th, td{border: 1px solid #ddd; padding: 10px; text-align: left;} th{background-color: #f2f2f2;} tbody tr:nth-child(even){background-color: #f9f9f9;}</style></head><body onload="window.print()">' + divToPrint.innerHTML + '</body></html>');
        newWin.document.close();
        setTimeout(function () { newWin.close(); }, 10);
    }

    async function showDetails(courseId) {
        nowpage = "details";
        document.getElementById('course_date').style.display = 'none';
        document.getElementById('courseDiv').style.display = 'none';
        document.getElementById('courseDetails').style.display = 'block';

        current_eventId = courseId;

        const response = await fetch(url + '/course/QueryById?id=' + courseId);
        const result = await response.json();

        if (result.code != 0) {
            showMessage('server error', 'error');
        }
        courseData = result.data;
        current_course = courseData;

        document.getElementById('courseName').textContent = courseData.title;
        document.getElementById('courseTime').textContent = formatDateTime(courseData.start_dt) + ' - ' + formatTime(courseData.end_dt);
        document.getElementById('courseLevel').textContent = courseData.class_level;
        document.getElementById('courseType').textContent = courseData.class_category;
        document.getElementById('who').textContent = courseData.who ? replaceCommas(courseData.who) : '';
        document.getElementById('signedup').innerHTML = courseData.signed_up;
        document.getElementById('coursetext_preview').textContent = courseData.preview;
        document.getElementById('coursetext_homework').textContent = courseData.homework;

        document.getElementById('uploadedFiles_preview').innerHTML = '';
        document.getElementById('uploadedFiles_homework').innerHTML = '';
        // 加载已上传的文件
        if (courseData.value1) {
            loadUploadedFiles(courseData.value1.split('/'), 'uploadedFiles_preview');
        }
        if (courseData.value2) {
            loadUploadedFiles(courseData.value2.split('/'), 'uploadedFiles_homework');
        }

        displayData(courseData.student);
    }
    function loadUploadedFiles(files, containerId) {
        const container = document.getElementById(containerId);
        container.innerHTML = '';
        files.forEach(filename => {
            if (filename === '') return;
            const fileItem = document.createElement('div');
            fileItem.classList.add('uploaded-file');
            fileItem.innerHTML = `
            <span><a href="/download/${filename}" target="_blank">${subStrFilename(filename)}</a></span>
            <i class="fas fa-trash delete-icon" onclick="deleteFile('${filename}', '${containerId}')"></i>
        `;
            container.appendChild(fileItem);
        });
    }
    function replaceNumberToNull(str) {
        return str ? str.replace(/\d+/g, '') : str;
    }
    function displayData(data) {
        // studentAttendance
        const studentAttendance = document.getElementById('studentAttendance');
        studentAttendance.innerHTML = `<div style="display: flex; align-items: center; ">
                    <div style="width: 4px; height: 24px; background-color: #2F51FF; "></div>
                        <span style="padding: 0 3px; color: #2F51FF; font-weight: bold">Student attendance</span>
                        <span style="padding: 0 3px;color: #3f3f43;font-weight: bold;margin-left: auto;font-size: 12px;">Courses Students(${data.length})</span>
                    </div>`;

        const studentList = document.getElementById('studentList');
        studentList.innerHTML = `<div style="display: flex; align-items: center; ">
                    <div style="width: 4px; height: 24px; background-color: #2F51FF; "></div>
                        <span style="padding: 0 3px; color: #2F51FF; font-weight: bold">Student evaluation</span>
                    </div>`;
        data.forEach((student, i) => {
            const scode = student.code;
            if (scode == '' || student.name == '') return;
            const studentItem = document.createElement('div');
            studentItem.classList.add('rating-container');
            studentItem.id = scode;

            // 学生考勤
            {
                const studentAttendanceItem = document.createElement('div');
                studentAttendanceItem.classList.add('student_att');
                // <span class="taster">taster</span>
                studentAttendanceItem.innerHTML = `
                    <div class="student">
                        <div class="student-info">
                            <div class="student-name">
                                ${replaceNumberToNull(student.name)}<br>
                                <span class="status">1927318628</span>
                            </div>
                        </div>
                        <div class="attendance-status">
                            <select id= "select_${scode}" value="${student.state}" onchange="confirmHandleStatusChange('${scode}','${student.name}', this.value)">
                                 <option value="0">&#9989; Normal</option>
                                <option value="1">&#128337; Late</option>
                                <option value="9">&#10060; Absence</option>
                               
                            </select>
                        </div>
                    </div>
                `;
                studentAttendance.appendChild(studentAttendanceItem);
            }

            const studentInfo = document.createElement('div');
            studentInfo.addEventListener('click', () => toggleDetails(scode));
            studentInfo.classList.add('dropdown');
            if (student.value2 == '1') {
                studentInfo.innerHTML += `<div class="new-badge-stu">NEW</div>`;
            }
            if (i == 0) {
                studentInfo.innerHTML += `
                <span >${replaceNumberToNull(student.name)}</span>
                <i class="fas fa-angle-right rotated" id="arrow_${scode}"></i>
            `;
            } else {
                studentInfo.innerHTML += `
                <span >${replaceNumberToNull(student.name)}</span>
                <i class="fas fa-angle-right" id="arrow_${scode}"></i>
            `;
            }
            const studentDetails = document.createElement('div');
            if (i == 0) {
                studentDetails.classList.add('details');
            } else {
                studentDetails.classList.add('details', 'hidden');
            }
            studentDetails.id = `details_${scode}`;

            const listening = document.createElement('div');
            listening.classList.add('rating-item');
            listening.innerHTML = `
                <span style="width:80px">Listening</span>
                <div class="stars" data-rating="${student.read}" data-category="listening" data-code="${scode}">
                    <span class="star ${student.read >= 1 * 20 ? 'selected' : ''}">&#9733;</span>
                    <span class="star ${student.read >= 2 * 20 ? 'selected' : ''}">&#9733;</span>
                    <span class="star ${student.read >= 3 * 20 ? 'selected' : ''}">&#9733;</span>
                    <span class="star ${student.read >= 4 * 20 ? 'selected' : ''}">&#9733;</span>
                    <span class="star ${student.read >= 5 * 20 ? 'selected' : ''}">&#9733;</span>
                </div>
                <span class="score score_read" >${student.read}%</span>
            `;
            const stars1 = listening.querySelectorAll('.stars');
            stars1.forEach(starContainer => {
                starContainer.addEventListener('click', (e) => {
                    const category = starContainer.getAttribute('data-category');
                    const selectedStar = e.target;
                    const starIndex = Array.from(starContainer.children).indexOf(selectedStar) + 1;

                    // Update the star selection visually
                    updateStars(starContainer, starIndex);

                    // Update the score
                    listening.getElementsByClassName(`score`)[0].textContent = starIndex * 20 + '%';
                });
            });

            const readingWriting = document.createElement('div');
            readingWriting.classList.add('rating-item');
            readingWriting.innerHTML = `
                <span style="width:80px">Reading/Writing</span>
                <div class="stars" data-rating="${student.write}" data-category="reading-writing" data-code="${scode}">
                    <span class="star ${student.write >= 1 * 20 ? 'selected' : ''}">&#9733;</span>
                    <span class="star ${student.write >= 2 * 20 ? 'selected' : ''}">&#9733;</span>
                    <span class="star ${student.write >= 3 * 20 ? 'selected' : ''}">&#9733;</span>
                    <span class="star ${student.write >= 4 * 20 ? 'selected' : ''}">&#9733;</span>
                    <span class="star ${student.write >= 5 * 20 ? 'selected' : ''}">&#9733;</span>
                </div>
                <span class="score score_write">${student.write}%</span>
            `;
            const stars2 = readingWriting.querySelectorAll('.stars');
            stars2.forEach(starContainer => {
                starContainer.addEventListener('click', (e) => {
                    const category = starContainer.getAttribute('data-category');
                    const selectedStar = e.target;
                    const starIndex = Array.from(starContainer.children).indexOf(selectedStar) + 1;

                    // Update the star selection visually
                    updateStars(starContainer, starIndex);

                    // Update the score
                    readingWriting.getElementsByClassName(`score`)[0].textContent = starIndex * 20 + '%';
                });
            });

            const focus = document.createElement('div');
            focus.classList.add('rating-item');
            focus.innerHTML = `
                <span style="width:80px">Focus</span>
                <div class="stars" data-rating="${student.level}" data-category="focus" data-code="${scode}">
                    <span class="star ${student.level >= 1 * 20 ? 'selected' : ''}">&#9733;</span>
                    <span class="star ${student.level >= 2 * 20 ? 'selected' : ''}">&#9733;</span>
                    <span class="star ${student.level >= 3 * 20 ? 'selected' : ''}">&#9733;</span>
                    <span class="star ${student.level >= 4 * 20 ? 'selected' : ''}">&#9733;</span>
                    <span class="star ${student.level >= 5 * 20 ? 'selected' : ''}">&#9733;</span>
                </div>
                <span class="score score_level">${student.level}%</span>
            `;
            const stars3 = focus.querySelectorAll('.stars');
            stars3.forEach(starContainer => {
                starContainer.addEventListener('click', (e) => {
                    const category = starContainer.getAttribute('data-category');
                    const selectedStar = e.target;
                    const starIndex = Array.from(starContainer.children).indexOf(selectedStar) + 1;

                    // Update the star selection visually
                    updateStars(starContainer, starIndex);

                    // Update the score
                    focus.getElementsByClassName(`score`)[0].textContent = starIndex * 20 + '%';
                });
            });

            let homewk = null;
            if (student.homework && student.homework != "undefined") {
                homewk = document.createElement('div');
                homewk.classList.add('rating-item');
                homewk.innerHTML = ` <span style="width:80px">Homework</span><a href="baidu.com"> <span><a href="/download/${student.homework}" target="_blank">${subStrFilename(student.homework)}</a></span></a>`;
            }


            const commentBox = document.createElement('div');
            commentBox.classList.add('comment-box');
            commentBox.innerHTML = `
                <label>Comment</label>
                <textarea id="comment_${scode}" maxlength="200">${student.evaluate}</textarea>
                <div class="char-counter">
                    <span id="charCount_${scode}">${student.evaluate.length}</span>/200
                </div>
            `;
            commentBox.querySelector('textarea').oninput = (event) => handleComment(event, scode);
            // Character count for the comment box

            studentDetails.appendChild(listening);
            studentDetails.appendChild(readingWriting);
            studentDetails.appendChild(focus);
            if (homewk) {
                studentDetails.appendChild(homewk);
            }

            studentDetails.appendChild(commentBox);

            studentItem.appendChild(studentInfo);
            studentItem.appendChild(studentDetails);

            studentList.appendChild(studentItem);
        });
        // 页面加载完毕后设置radio选中状态
        data.forEach(stu => {
            document.getElementById('select_' + stu.code).value = stu.state;
        });
    }

    // 截取文件名，保持后缀
    function subStrFilename(filename) {
        const extension = filename.substring(filename.lastIndexOf('.'));
        const name = filename.substring(0, filename.lastIndexOf('.'));
        if (name.length > 35) {
            return '...' + name.substring(name.length - 5) + extension;
        }
        return filename;
    }
    function checkfile() {
        document.getElementById('fileUpload').click();
    }
    function uploadFile() {
        const files = document.getElementById('fileUpload').files;
        const uploadedFilesContainer = document.getElementById('uploadedFiles_' + filetype_check);
        const existingFiles = uploadedFilesContainer.children.length;

        if (existingFiles + files.length > 2) {
            showMessage('You can upload up to two attachments only.', 'warning');
            return;
        }
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const fileId = 'file-' + Date.now() + '-' + i;

            // 创建 FormData 对象
            const formData = new FormData();
            formData.append('file', file);

            // 向服务器发送文件
            fetch('/upload', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json()) // 假设服务器返回JSON
                .then(result => {
                    if (result.code !== 0) {
                        showMessage('Failed to upload file.', 'error');
                        return;
                    }
                    // 显示已上传文件
                    const fileElement = document.createElement('div');
                    fileElement.className = 'uploaded-file';
                    fileElement.id = fileId;
                    fileElement.innerHTML = `
                        <span><a href="/download/${result.data.filePath}" target="_blank" id="${result.data.filePath}">${subStrFilename(result.data.filePath)}</a></span>
                        <i class="fas fa-trash delete-icon" onclick="deleteFile('${fileId}', '${result.data.filePath}')"></i>
                    `;
                    uploadedFilesContainer.appendChild(fileElement);
                })
                .catch(error => {
                    showMessage('Failed to upload file.', 'error');
                    console.error('Error:', error);
                });
        }
    }

    function deleteFile(fileId, filename) {
        // 向服务器发送删除请求
        fetch('/delete', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ filename: filename })
        })
            .then(response => response.json()) // 假设服务器返回JSON
            .then(result => {
                if (result.code == 0) {
                    // 删除前端显示的文件
                    const fileElement = document.getElementById(fileId);
                    fileElement.parentNode.removeChild(fileElement);
                } else {
                    showMessage('Failed to delete file.', 'error');
                }
            })
            .catch(error => {
                showMessage('Failed to delete file.', 'error');
                console.error('Error:', error);
            });
    }

    async function fetchData() {
        try {
            document.getElementById('selectAll').checked = false;
            const selectedDate = document.getElementById('selectedDate');
            current_date = selectedDate.value;
            const response = await fetch(url + '/course/GetData', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ date: current_date, subid })
            });
            const result = await response.json();

            if (result.code != 0) {
                showMessage('server error', 'error');
            }
            const courseList = document.getElementById('courseList');
            courseList.innerHTML = '';
            today_course = result.data;

            if (result.data.length == 0) {
                const courseItem = document.createElement('div');
                courseItem.classList.add('course-item');
                courseItem.textContent = "You didn't schedule any classes today, have a great time！！！";
                courseList.appendChild(courseItem);
                return;
            }

            result.data.forEach((course, index) => {
                const courseItem = document.createElement('div');
                courseItem.id = "div_" + course.id;
                courseItem.classList.add('course-item');
                if (course.attend == 9) {
                    courseItem.classList.add('course-item-absent');
                }
                if (index % 3 == 0) {
                    courseItem.innerHTML += `<div class="course-icon">🎓</div>`;
                } else if (index % 3 == 1) {
                    courseItem.innerHTML += `<div class="course-icon">🎨</div>`;
                } else {
                    courseItem.innerHTML += `<div class="course-icon">💻</div>`;
                }
                const leaveCheckCss = isLeaveCheck ? 'leaveHide' : '';
                courseItem.innerHTML +=
                    `<div class="course-info">
                    <h4 onclick="showDetails('${course.id}')">${course.title}</h4>
                   
                    <p><i class="fas fa-clock" title="course time"></i>&nbsp;&nbsp;${formatTime(course.start_dt)} ~ ${formatTime(course.end_dt)}
                         <i class="fas fa-user-slash leave-icon ${course.isleave ? 'show' : 'hide'}" title="The teacher has requested leave">
                            </i>
                            </p>
                    <p><i class="fas fa-user" title="student name"></i>&nbsp;&nbsp;${course.who ? replaceCommas(course.who) : ''}</p>
                    <p class="rlable ${leaveCheckCss}"><i class="fas fa-plus add-course" title="singned up"></i>&nbsp;&nbsp;${course.signed_up}<label class="accept"><input type="radio" name="attendance_${course.id}" value="1" onchange="confirmAttendanceChange('${course.id}','1')">Accept</label>
                        <label class="refuse"><input type="radio" name="attendance_${course.id}" value="9" onchange="confirmAttendanceChange('${course.id}','9')">Refuse</label></p>
                </div>`;
                if (course.value2 == '1') {
                    courseItem.innerHTML += `<div class="new-badge">NEW</div>`;
                }
                courseItem.innerHTML += `<div class="course-arrow ${leaveCheckCss}" onclick="showDetails('${course.id}')"><i class="fas fa-angle-right"></i></div>`;

                const isleaveCheckCss2 = isLeaveCheck ? 'leaveShow' : 'leaveHide';
                if(course.isleave){
                    courseItem.innerHTML += `<input type="checkbox" checked disabled class="courseCheckBox ${isleaveCheckCss2}" id="leave_${course.id}" value="${course.id}">`;
                }else{
                    courseItem.innerHTML += `<input type="checkbox" class="courseCheckBox ${isleaveCheckCss2}" id="leave_${course.id}" value="${course.id}">`;
                }
                courseList.appendChild(courseItem);
            });

            // 页面加载完毕后设置radio选中状态
            result.data.forEach(course => {
                const attendanceRadio = document.querySelector(`input[name="attendance_${course.id}"][value="${course.attend}"]`);
                if (attendanceRadio) {
                    attendanceRadio.checked = true;
                }
            });
        } catch (error) {
            console.error('There has been a problem with your fetch operation:', error);
        }
    }

    async function fetchNewMessages() {
        const response = await fetch(url + '/message?code=' + subid, {
            method: 'GET'
        });
        const result = await response.json();

        if (result.code != 0) {
            showMessage('Failed to fetch new messages', 'error');
            return;
        }
        messages = [];
        result.data.forEach(item => {
            const newMessage = {
                text: item.msg,
                url: item.url,
                time: item.create_date
            };
            messages.push(newMessage);
        });

        // 存储消息到 localStorage
        localStorage.setItem('messages', JSON.stringify(messages));

        updateNotificationCount(messages.length);
    }

    async function changeDate(days) {
        const dateInput = document.getElementById('selectedDate');
        const currentDate = new Date(dateInput.value);
        currentDate.setDate(currentDate.getDate() + days);
        dateInput.value = currentDate.toISOString().split('T')[0];
        await fetchData();
    }

    // 显示或隐藏消息弹出框
    function toggleNotificationPopup() {
        const popup = document.getElementById('notification-popup');
        if (popup.style.display === 'none' || popup.style.display === '') {
            loadNotifications();
            popup.style.display = 'block';
        } else {
            popup.style.display = 'none';
        }
    }

    // 更新消息数
    function updateNotificationCount(count) {
        document.getElementById('notification-count').innerText = count;
    }
    // 加载消息记录
    function loadNotifications() {
        const messages = JSON.parse(localStorage.getItem('messages')) || [];
        const notificationList = document.getElementById('notification-list');
        notificationList.innerHTML = '';
        messages.forEach(message => {
            const listItem = document.createElement('li');
            listItem.innerHTML = `<a href="${message.url}">${message.text}</a> &nbsp;&nbsp;<small>${message.time}</small>`;
            notificationList.appendChild(listItem);
        });
    }

    function toggleDetails(scode) {
        const details = document.getElementById('details_' + scode);
        const arrow = document.getElementById('arrow_' + scode);

        if (details.classList.contains('hidden')) {
            details.classList.remove('hidden');
            arrow.classList.add('rotated');
        } else {
            details.classList.add('hidden');
            arrow.classList.remove('rotated');
        }
    }

    function handleComment(e, scode) {
        console.log('handleComment');
        const comment = e.target.value;
        const charCount = document.getElementById('charCount_' + scode);
        charCount.textContent = comment.length;
    }

    function updateStars(container, rating) {
        const stars = container.children;
        for (let i = 0; i < stars.length; i++) {
            stars[i].classList.remove('selected');
            if (i < rating) {
                stars[i].classList.add('selected');
            }
        }
    }

    async function Save() {
        // 保存学生评价
        const studentInfos = [];
        const students = document.getElementById('studentList').children;
        for (let i = 1; i < students.length; i++) {
            const student = students[i];
            const code = student.id;
            const read = student.getElementsByClassName('score_read')[0].textContent.replace('%', '');
            const write = student.getElementsByClassName('score_write')[0].textContent.replace('%', '');
            const level = student.getElementsByClassName('score_level')[0].textContent.replace('%', '');
            const evaluate = document.getElementById('comment_' + code).value;

            studentInfos.push({ code, read, write, level, evaluate });
        }

        const preview = document.getElementById('coursetext_preview').value;
        const homework = document.getElementById('coursetext_homework').value;
        let previewfiles = '';
        const previewFiles = Array.from(document.querySelectorAll('#uploadedFiles_preview .uploaded-file'));
        previewFiles.forEach(file => {
            const fileName = file.children[0].childNodes[0].id;
            previewfiles += fileName + '/';
        });

        const homeworkFiles = Array.from(document.querySelectorAll('#uploadedFiles_homework .uploaded-file'));
        let homeworkfiles = '';
        homeworkFiles.map(file => {
            const fileName = file.children[0].childNodes[0].id;
            homeworkfiles += fileName + '/';
        });

        const response = await fetch(url + '/course/SaveInfo', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ id: current_eventId, students: studentInfos, preview, homework, previewfiles, homeworkfiles })
        });
        const result = await response.json();

        if (result.code != 0) {
            showMessage('Feedback submitted faild', 'error');
        } else {
            showMessage('Feedback submitted successfully', 'success');
        }
    }

    function confirmHandleStatusChange(code, name, state) {
        let msg = "Are you sure you reported the student as late? The system will immediately send a text message reminder to parents!?";
        if (state == 9) {
            msg = "Are you sure to report a student's absence from class? The system will immediately send a text message reminder to parents!?";
        } else if (state == 0) {
            msg = "Are you sure to report a student's normal? ";
        }
        showConfirm(msg, function(confirmation){
            if (confirmation) {
                handleStatusChange(code, name, state);
            } else {
                // 如果用户取消确认，则恢复原来的选中状态
                const originalValue = current_course.student.find(st => st.code == code).state;
                document.getElementById('select_' + code).value = originalValue;
            }
        });
    }

    // Example function to handle status change
    async function handleStatusChange(code, name, state) {
        console.log(`Studentcode: ${code}, Status: ${state}`);
        const response = await fetch(url + '/course/SignStudentStatus', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ id: current_eventId, code, name, state })
        });
        const result = await response.json();

        if (result.code != 0) {
            showMessage(`Failed to reported student ${replaceNumberToNull(name)}'s ${state == '1' ? 'lateness' : 'absence'} information!`, 'error');
            const originalValue = current_course.student.find(st => st.code == code).state;
            document.getElementById('select_' + code).value = originalValue;
        } else {
            current_course.student.find(st => st.code == code).state = state;
            showMessage(`Successfully reported student ${replaceNumberToNull(name)}'s ${state == '1' ? 'lateness' : 'absence'} information!`, 'success');
        }
    }

    function confirmAttendanceChange(courseId, value) {
        let msg = "Are you sure you will attend?";
        if (value == 9) {
            msg = "Are you sure you don't show up for the class? Clicking Confirm will clear the student and notify their parents of the cancellation of the lesson via SMS.";
        }
        const confirmation = showConfirm(msg, function(confirmation){
            if (confirmation) {
                handleAttendanceChange(courseId, value);
            } else {
                // 如果用户取消确认，则恢复原来的选中状态
                const originalValue = today_course.find(course => course.id == courseId).attend;
                document.querySelector(`input[name="attendance_${courseId}"][value="${originalValue}"]`).checked = true;
            }
        });
    }

    async function handleAttendanceChange(courseId, attend) {
        const response = await fetch(url + '/course/EditData', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ id: courseId, attend: attend })
        });
        const result = await response.json();

        if (result.code != 0) {
            showMessage(`Failed to report leave request!`, 'error');
            // 如果更新teamup失败，则恢复原来的选中状态
            const originalValue = today_course.find(course => course.id == courseId).attend;
            document.querySelector(`input[name="attendance_${courseId}"][value="${originalValue}"]`).checked = true;
        } else {
            const original = today_course.find(course => course.id == courseId);
            original.attend = attend;
            if (attend != 9) {
                document.getElementById("div_" + courseId).classList.remove('course-item-absent');
            } else {
                document.getElementById("div_" + courseId).classList.add('course-item-absent');
            }

            fetchData();
            showMessage(`Successfully reported leave request!`, 'success');
        }
    }


    function formatDate(date) {
        if (date == undefined) {
            date = new Date();
        } else {
            date = new Date(date);
        }
        const timeZone = new Date().toLocaleTimeString('en-us', { timeZoneName: 'short' }).split(' ')[2];//Intl.DateTimeFormat().resolvedOptions().timeZone;
        if (timezoneSet != timeZone) {
            date = new Date(date.toLocaleString('en-US', { timeZone: timezoneSet }));
        }
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }
    function formatDateTime(date) {
        if (date == undefined) {
            date = new Date();
        } else {
            date = new Date(date);
        }
        const timeZone = new Date().toLocaleTimeString('en-us', { timeZoneName: 'short' }).split(' ')[2];//Intl.DateTimeFormat().resolvedOptions().timeZone;
        if (timezoneSet != tzSet[timeZone]) {
            date = new Date(date.toLocaleString('en-US', { timeZone: timezoneSet }));
        }
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        return `${year}-${month}-${day} ${hours}:${minutes}`;
    }
    function formatTime(date) {
        if (date == undefined) {
            date = new Date();
        } else {
            date = new Date(date);
        }
        const timeZone = new Date().toLocaleTimeString('en-us', { timeZoneName: 'short' }).split(' ')[2];//Intl.DateTimeFormat().resolvedOptions().timeZone;
        if (timezoneSet != tzSet[timeZone]) {
            date = new Date(date.toLocaleString('en-US', { timeZone: timezoneSet }));
        }

        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        return `${hours}:${minutes}`;
    }

    function replaceCommas(str) {
        console.log(str);
        let resStr = str.split(/[,，]+/).map(x => x.replace(/\d+$/, '')).join('，')
        //resStr = resStr.substring(0, resStr.length - 1);
        return resStr;
    }
</script>